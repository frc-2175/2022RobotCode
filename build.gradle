plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2022.1.1"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
                
                frcLuaDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/lua')
                    directory = '/home/lvuser/lua'
                }

                frcLogViewerDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('tools/logViewer')
                    directory = '/home/lvuser/deploy/logViewer'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

def includeSrcInIncludeRoot = false

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Enable simulator plugins
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addWebsocketsServer().defaultEnabled = true

// Disable DS by default
// wpi.sim.addDriverstation()

class FileDependencySet implements NativeDependencySet {
    private FileCollection headerFiles;
    private FileCollection linkFiles;
    private FileCollection emptySet;

    FileDependencySet(FileCollection files, FileCollection headerFiles, FileCollection emptySet) {
        linkFiles = files
        this.headerFiles = headerFiles
        this.emptySet = emptySet
    }

    @Override
    FileCollection getIncludeRoots() {
        return headerFiles
    }

    @Override
    FileCollection getLinkFiles() {
        return linkFiles
    }

    @Override
    FileCollection getRuntimeFiles() {
        return emptySet
    }
}

def luajit_athena = new FileDependencySet(
    project.files("lib/lib/libluajit.a"),
    project.files('lib/lib/include'),
    project.files("lib/lib/libluajit.so")
)
def luajit_win64 = new FileDependencySet(
    project.files("lib/lib/lua51.lib", "lib/lib/luajit.lib", "lib/lib/buildvm.lib", "lib/lib/minilua.lib"),
    project.files('lib/lib/include'),
    project.files("lib/lib/lua51.dll")
)
def luajit_mac = new FileDependencySet(
    project.files('lib/lib/mac_x86_libluajit-5.1.a'),
    project.files('lib/lib/include'),
    project.files('lib/lib/mac_x86_libluajit-5.1.2.1.0.dylib')
)

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            binaries.all{
                it.lib luajit_athena
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
        simulatorProgram(NativeExecutableSpec) { 
            targetPlatform wpi.platforms.desktop

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc' 
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            binaries.all{
                it.lib luajit_win64
                it.lib luajit_mac
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)
            
            wpi.sim.enable(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
}
